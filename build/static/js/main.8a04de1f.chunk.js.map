{"version":3,"sources":["services/api.js","styles/StoryStyles.js","components/Story.js","mappers/mapTime.js","styles/HeaderStyles.js","components/Header.js","styles/StoriesContainerStyles.js","containers/StoriesContainer.js","App.js","serviceWorker.js","index.js"],"names":["getStory","currentPageCount","a","url","axios","get","response","data","console","log","StoryWrapper","styled","section","StoryMetaElement","h1","div","span","props","color","StoryText","p","Story","paginationStyle","textDecoration","float","padding","fontSize","fontWeight","useState","stories","setStory","totalPageCount","setTotalPageCount","setCurrentPageCount","intialVoteCount","window","localStorage","getItem","currentVoteCount","JSON","parse","voteCount","setVoteCount","useEffect","then","hits","pages","nbPages","map","story","data-testid","key","objectID","style","width","num_comments","href","onClick","id","count","setItem","stringify","increment","target","rel","title","author","timestamp","seconds","Math","floor","Date","interval","mapTime","created_at_i","newList","filter","item","handleHide","HeaderMenuWrapper","HeaderMenu","Header","GlobalStyle","createGlobalStyle","StoriesContainerWrapper","main","StoriesContainer","data-test-id","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8a04de1f.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const getStory = async (currentPageCount) => {\n    //API\n    const url = `https://hn.algolia.com/api/v1/search?query=story&page=${currentPageCount}&hitsPerPage=15`;\n    try {\n        const response = await axios.get(url);\n        const data = await response.data;\n        return data;\n    } catch (error) {\n        console.log('error: ', error);\n    }\n};\n","import styled from 'styled-components';\n\nexport const StoryWrapper = styled.section`\n  padding-top: 0px;\n  margin-bottom: 0px;\n  border-top: 1px solid #cccccc;\n\n  &:first-of-type {\n    border-top: 0;\n  }\n  &:last-of-type {\n    margin-bottom: 0;\n    padding-bottom: 0;\n  }\n  &:nth-child(odd) {\n    background-color:#efebe9;\n  }\n  &:nth-child(even) {\n    background-color:#eae4e1;\n  }\n\n`;\n\nexport const StoryTitle = styled.h1`\n  margin-bottom: 5px;\n  font-size: 18px;\n  line-height: 1.8;\n  margin: 0;\n  text-decoration: none;\n  a {\n    color: #2e2e2c;\n    background-color: #f8dc3d;\n    text-decoration: none;\n  }\n`;\n\nexport const StoryMeta = styled.div`\n  font-style: italic;\n  > span:first-child {\n    margin-right: 10px;\n  }\n  > span:not(:first-child):before {\n    content: 'â€¢'\n    margin: 0 7px;\n  }\n  .story__meta-bold {\n    font-weight: bold;\n  }\n`;\n\nexport const StoryMetaElement = styled.span`\n  font-weight: normal;\n  font-size:12px;\n  color: ${props => props.color};\n`;\n\nexport const StoryText = styled.p`\n  font-size:12px;\n  display:inline-block;\n  padding:0px 15px;\n  a {\n    color: #2e2e2c;\n    text-decoration: none;\n  }\n`;","import React, { useState, useEffect } from 'react';\nimport { getStory } from '../services/api';\nimport { \n    StoryWrapper, \n    StoryMetaElement, \n    StoryText \n} from '../styles/StoryStyles';\nimport { mapTime } from '../mappers/mapTime';\n\nexport const Story = () => {\n\n    const  paginationStyle = {\n        textDecoration:'none',\n        color:'#ff6600',\n        float:'right',\n        padding: '5px 5px',\n        fontSize: '13px',\n        fontWeight: '700'\n    }\n    //Story state\n    const [stories, setStory] = useState([]);\n\n    //Pagination state\n    const [totalPageCount, setTotalPageCount] = useState(0);\n    const [currentPageCount, setCurrentPageCount] = useState(0);\n\n    const goToPrevious = () => {\n        setCurrentPageCount(currentPageCount - 1);\n    }\n\n    const goToNext = () => {\n        setCurrentPageCount(currentPageCount + 1);\n    }\n\n    //Votecount state\n    const intialVoteCount = window.localStorage.getItem('voteCount');\n    const currentVoteCount = intialVoteCount ? JSON.parse(intialVoteCount) : {};\n    const [voteCount, setVoteCount] = useState(currentVoteCount);\n\n    const increment = (id) => {\n        const count = {\n            ...voteCount,\n            [id]: voteCount[id] ? voteCount[id] + 1 : 1\n        }\n        setVoteCount(count);\n        window.localStorage.setItem('voteCount', JSON.stringify(count));\n    }\n\n    useEffect(() => {\n        getStory(currentPageCount).then(data => {\n            if (data) {\n                setStory(data.hits || []);\n                const pages = data.nbPages || 0;\n                setTotalPageCount(pages);\n            }\n        });\n    }, [currentPageCount]);\n\n        //Hide functionality\n        const handleHide = (story) => {\n            const newList = stories.filter((item) => \n            item.objectID !== story.objectID \n        );\n            setStory(newList);\n        }\n        \n\n    return (\n        <> \n            {stories.map(story =>\n                <StoryWrapper data-testid=\"story\" key={story.objectID}>\n                    <StoryText style={{width: 100}}>{story.num_comments}</StoryText>\n                    <StoryText style={{width: 100}}>{voteCount[story.objectID] || 0}</StoryText>\n                    <StoryText style={{width: 100}}>\n                        <a href=\"#\" onClick={() => increment(story.objectID)}>&#9650;</a>\n                    </StoryText>\n                    <StoryText>\n                        <a href={story.url} target=\"_blank\" rel=\"noopener noreferrer\">{story.title}</a>&nbsp;  &nbsp;\n                        <span data-testid=\"author\">\n                            <StoryMetaElement color=\"#A9A9A9\">by:</StoryMetaElement> {story.author}\n                        </span>&nbsp;  &nbsp;\n                        <span data-testid=\"story-time\">\n                            <StoryMetaElement color=\"#A9A9A9\">posted:</StoryMetaElement> {` `}\n                            {mapTime(story.created_at_i)}\n                        </span>&nbsp;  &nbsp;\n                        <span>\n                            <a href=\"#\" onClick={() => handleHide(story)}>\n                                <StoryMetaElement color=\"#A9A9A9\">[</StoryMetaElement>\n                                &nbsp;Hide&nbsp;\n                                <StoryMetaElement color=\"#A9A9A9\">]</StoryMetaElement>\n                            </a>\n                        </span>\n                    </StoryText>\n                </StoryWrapper>\n            )\n            }\n            {totalPageCount !== currentPageCount && <a href=\"#\" onClick={goToNext} style={paginationStyle}>Next</a>}\n            {currentPageCount ? <a href=\"#\" onClick={goToPrevious} style={paginationStyle}>Previous&nbsp;&nbsp;|</a> : null}\n            \n        </>\n    )\n}\n\n","export const mapTime = timestamp => {\n    const seconds = Math.floor((new Date() - timestamp * 1000) / 1000);\n  \n    let interval = Math.floor(seconds / 31536000);\n  \n    if (interval > 1) {\n      return `${interval} years ago`;\n    }\n    interval = Math.floor(seconds / 2592000);\n  \n    if (interval > 1) {\n      return `${interval} months ago`;\n    }\n    interval = Math.floor(seconds / 86400);\n  \n    if (interval > 1) {\n      return `${interval} days ago`;\n    }\n    interval = Math.floor(seconds / 3600);\n  \n    if (interval > 1) {\n      return `${interval} hours ago`;\n    }\n    interval = Math.floor(seconds / 60);\n  \n    if (interval > 1) {\n      return `${interval} minutes ago`;\n    }\n  \n    return `${Math.floor(seconds)} seconds ago`;\n  };","import styled from 'styled-components';\n\nexport const HeaderMenuWrapper = styled.div`\n  width:100%;\n  background-color:#ff6600;\n`;\n\nexport const HeaderMenu = styled.p`\n    display:inline-block;\n    padding: 0px 1em;\n    font-size:12px;\n    color:#fff;\n    font-weight:600;\n`;","import React from 'react';\nimport { \n    HeaderMenuWrapper, \n    HeaderMenu, \n} from '../styles/HeaderStyles';\n\nexport const Header = () => {\n    return (\n        <HeaderMenuWrapper>\n            <HeaderMenu style={{width: 100}}>Comments</HeaderMenu>\n            <HeaderMenu style={{width: 100}}>Vote Count</HeaderMenu>\n            <HeaderMenu style={{width: 100}}>Upvote</HeaderMenu>\n            <HeaderMenu style={{width: 100}}>News Details</HeaderMenu>\n        </HeaderMenuWrapper>\n    )\n}","import styled, { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  html {\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box;\n  }\n  *, *:before, *:after {\n    -webkit-box-sizing: inherit;\n            box-sizing: inherit;\n  }\n  body {\n    margin: 0;\n    padding: 0;\n    line-height: 1;\n    color: #202020;\n    background-color: #fafafe;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 16px;\n  }\n  ul {\n    margin: 0;\n    padding: 0;\n  }\n`;\n\nexport const StoriesContainerWrapper = styled.main`\n  max-width: 1140px;\n  padding: 20px 15px 100px 15px;\n  margin: auto;\n`;","import React from 'react';\nimport { Story } from '../components/Story';\nimport { Header } from '../components/Header';\nimport {\n    GlobalStyle,\n    StoriesContainerWrapper,\n} from '../styles/StoriesContainerStyles';\n\nexport const StoriesContainer = () => {\n\n    return (\n        <>\n            <GlobalStyle />\n            <StoriesContainerWrapper data-test-id=\"stories-container\">\n                <h2>Hack-News</h2>\n                <Header />\n                <Story />\n            </StoriesContainerWrapper>          \n        </>\n    )\n};","import React from 'react';\nimport { StoriesContainer } from './containers/StoriesContainer.js'\n\nexport const App = () => <StoriesContainer />;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}